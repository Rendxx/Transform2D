{"version":3,"sources":["Transform2D.js"],"names":["$","keyName","isOldIE","detectOldIE","ele","detect","appendTo","hasClass","remove","getMatrix","matrix","css","indexOf","split","matrix2","matrixMult","m1","m2","m","getRotate","angle","a","b","Math","round","atan2","PI","getScale","rst","sqrt","getTranslate","para","data","Number","translateX","translateY","fn","rotate","deg","this","transform2D","scale","ratio","scaleX","scaleY","translate","offset","_parseOpts","options","input","operationIdx","opts","i","hasOwnProperty","parseFloat","substring","_getTransform","transform","scaleData","translateData","each","$this","radians","cos","sin","String","marginTop","marginLeft","parseInt","original_w","width","original_h","height","m_str_ie","w2","h2","offset_w","offset_h","m_str","jQuery"],"mappings":"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","file":"Transform2D.min.js","sourcesContent":["/************************************************ \r\n \r\nTransform 2D\r\nCopyright (c) 2014-2015 Dongxu Ren  http://www.rendxx.com/\r\n \r\nLicense: MIT (http://www.opensource.org/licenses/mit-license.php)\r\nVersion: 0.3.3\r\nUpdate: 2015-10-15\r\n\r\nDescription:\r\n   A simple way to implement CSS3 2D transform. Works in CSS2 as well. \r\n   Available transformation includes: rotation, scale, translate.\r\n\r\n   Each transformation is considered as an independent event, which mean multiple transformations will not affect each other.\r\n   The order of transformstion in CSS3 is Translate -> Rotate -> Scale.\r\n\r\n   This library supports IE 7-8 as well. Margin attribute is used to handle offset in this case. DO NOT change margin after applying transform in IE7-8\r\n      \r\nCompatibility:\r\n    Chrome; Fire Fox; Safari; Edge; IE 9-11; IE 7,8;\r\n\r\nDependency:\r\n   jQuery\r\n\r\nAPI:\r\n  Get 2D Transform data:\r\n    [jQuery Element].rotate();\r\n    - (number) get rotation of the element (in deg)\r\n\r\n    [jQuery Element].scale();\r\n    - ([number, number]) get scale ratio of the element (in [Scale X, Scale Y])\r\n\r\n    [jQuery Element].translate();\r\n    - ([number, number]) get translate of the element(in [Translate X, Translate Y])\r\n     \r\n    \r\n    [jQuery Element].transform2D();\r\n    - (object) get all transform2D of the element\r\n    - returned object data:\r\n        {\r\n            rotate: (number)\r\n            scaleX: (number)\r\n            scaleY: (number)\r\n            translateX: (number)\r\n            translateY: (number)\r\n        }\r\n        \r\n\r\n  Set 2D Transform:\r\n    Note: For all arguments, \"+=\" and \"-=\" at the head of an option mean add/minus given value based on current value, otherwise mean transform to that specific situation.\r\n\r\n    [jQuery Element].rotate(deg);\r\n    - Rotate the element clockwise\r\n    - Arguments:\r\n        deg: rotate the given degree, positive value means clockwise (number/string)\r\n\r\n    [jQuery Element].scaleX(ratio);\r\n    - Scale the element in X by the given ratio\r\n    - Arguments:\r\n        ratio: scale in x-axis (number/string)\r\n    \r\n    [jQuery Element].scaleY(ratio);\r\n    - Scale the element in Y by the given ratio\r\n    - Arguments:\r\n        ratio: scale in y-axis (number/string)\r\n\r\n    [jQuery Element].scale(ratio);\r\n    - Scale the element in both X and Y by the given ratio\r\n    - Arguments:\r\n        ratio: scale in both x-axis and y-axis (number/string)\r\n\r\n    [jQuery Element].scale(ratioArr);\r\n    - Scale the element in  X and Y separately\r\n    - Arguments:\r\n        ratioArr: [ratioX, ratioY]\r\n     \r\n    [jQuery Element].translateX(offset);\r\n    - Offset the element in X\r\n    - Arguments:\r\n        offset: offset in x-axis, positive value means right (number/string)\r\n     \r\n    [jQuery Element].translateY(offset);\r\n    - Offset the element in Y\r\n    - Arguments:\r\n        offset: offset in y-axis, positive value means bottom (number/string)\r\n     \r\n    [jQuery Element].translate(offsetArr);\r\n    - Offset the element in X and Y separately\r\n    - Arguments:\r\n        offsetArr: [offsetX,offsetY]\r\n\r\n    [jQuery Element].transform2D(opts);\r\n    - transform the element by given option\r\n    - Arguments:\r\n        opts\r\n            {\r\n                rotate: (number/string)\r\n                scaleX: (number/string)\r\n                scaleY: (number/string)\r\n                translateX: (number/string)\r\n                translateY: (number/string)\r\n            }\r\n************************************************/\r\n(function ($) {\r\n    \"use strict\";\r\n    // Private Function -----------------------------------------------\r\n    var keyName = \"Rtransform2D\";\r\n    var isOldIE = null;\r\n    var detectOldIE = function (ele) {\r\n        var detect = $('<!--[if lt IE 7]><div class=\"ieDetect ie6\"> <![endif]-->' +\r\n          '<!--[if IE 7]><div class=\"ieDetect ie7\"> <![endif]-->' +\r\n          '<!--[if IE 8]><div class=\"ieDetect ie8\"> <![endif]-->' +\r\n          '<!--[if gt IE 8]><!--><div class=\"ieDetect yes\"><!--<![endif]-->' +\r\n          '</div>');\r\n        detect.appendTo($(\"body\"));\r\n        if ($('.ieDetect').hasClass('yes')) {\r\n            detect.remove();\r\n            return false;\r\n        }\r\n        detect.remove();\r\n        return true;\r\n    };\r\n\r\n    var getMatrix = function (ele) {\r\n        var matrix = ele.css(\"-webkit-transform\") ||\r\n            ele.css(\"-moz-transform\") ||\r\n            ele.css(\"-ms-transform\") ||\r\n            ele.css(\"-o-transform\") ||\r\n            ele.css(\"transform\") ||\r\n            \"none\";\r\n        //console.log(matrix);\r\n        if (matrix === \"none\") {\r\n            // Deal with IE\r\n            matrix = ele.css(\"-ms-filter\") ||\r\n                ele.css(\"filter\") ||\r\n                \"none\";\r\n            if (matrix === \"none\" || matrix.indexOf(\"DXImageTransform.Microsoft.Matrix\") < 0) return [1, 0, 0, 1, 0, 0];\r\n            matrix = matrix.split('(')[1].split(')')[0].split(',');\r\n            var matrix2 = [];\r\n            matrix2[0] = matrix[0].split('=')[1];\r\n            matrix2[1] = matrix[2].split('=')[1];\r\n            matrix2[2] = matrix[1].split('=')[1];\r\n            matrix2[3] = matrix[3].split('=')[1];\r\n            matrix2[4] = 0;\r\n            matrix2[5] = 0;\r\n\r\n            return matrix2;\r\n        }\r\n        return matrix.split('(')[1].split(')')[0].split(',');\r\n    };\r\n\r\n    var matrixMult = function (m1, m2) {\r\n        m = [0, 0, 0, 0, 0, 0];\r\n        m[0] = m1[0] * m2[0] + m1[2] * m2[1];\r\n        m[1] = m1[1] * m2[0] + m1[3] * m2[1];\r\n        m[2] = m1[0] * m2[2] + m1[2] * m2[3];\r\n        m[3] = m1[1] * m2[2] + m1[3] * m2[3];\r\n        m[4] = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];\r\n        m[5] = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];\r\n        return m;\r\n    };\r\n    var getRotate = function (ele) {\r\n        var angle = 0;\r\n        var matrix = getMatrix(ele);\r\n        if (matrix != null) {\r\n            var a = matrix[0];\r\n            var b = matrix[1];\r\n            angle = Math.round(Math.atan2(b, a) * (180 / Math.PI));\r\n        } else {\r\n            angle = 0;\r\n        }\r\n        return (angle < 0) ? angle += 360 : angle;\r\n    };\r\n    var getScale = function (ele) {\r\n        var matrix = getMatrix(ele);\r\n        var rst = [1, 1];\r\n        if (matrix == null) return rst;\r\n        rst[0] = Math.sqrt(matrix[0] * matrix[0] + matrix[1] * matrix[1]);\r\n        rst[1] = Math.sqrt(matrix[2] * matrix[2] + matrix[3] * matrix[3]);\r\n        return rst;\r\n    };\r\n    var getTranslate = function (ele) {\r\n        if (isOldIE) {\r\n            var para = ele.data(keyName);\r\n            if (para != null)\r\n                return [Number(para.translateX), Number(para.translateY)];\r\n            else\r\n                return [0, 0];\r\n        }\r\n        var matrix = getMatrix(ele);\r\n        return [Number(matrix[4]), Number(matrix[5])];\r\n    };\r\n\r\n    // API ------------------------------------------------------------\r\n    // Get/Set Rotation\r\n    $.fn.rotate = function (deg) {\r\n        if (deg == null) return getRotate($(this));\r\n        $(this).transform2D({\r\n            rotate: deg\r\n        });\r\n    };\r\n\r\n    // Get/Set Scale\r\n    $.fn.scale = function (ratio) {\r\n        if (ratio == null) return getScale($(this));\r\n        if (typeof ratio == 'object')\r\n            $(this).transform2D({\r\n                scaleX: ratio[0],\r\n                scaleY: ratio[1]\r\n            });\r\n        else\r\n            $(this).transform2D({\r\n                scaleX: ratio,\r\n                scaleY: ratio\r\n            });\r\n    };\r\n\r\n    // Get/Set Scale X\r\n    $.fn.scaleX = function (ratio) {\r\n        if (ratio == null) return getScale($(this))[0];\r\n        $(this).transform2D({\r\n            scaleX: ratio\r\n        });\r\n    };\r\n\r\n    // Get/Set Scale Y\r\n    $.fn.scaleY = function (ratio) {\r\n        if (ratio == null) return getScale($(this))[1];\r\n        $(this).transform2D({\r\n            scaleY: ratio\r\n        });\r\n    };\r\n\r\n    // Get/Set Translate\r\n    $.fn.translate = function (offset) {\r\n        if (offset == null) return getTranslate($(this));\r\n        if (typeof offset == 'object')\r\n            $(this).transform2D({\r\n                translateX: offset[0],\r\n                translateY: offset[1]\r\n            });\r\n        else\r\n            $(this).transform2D({\r\n                translateX: offset,\r\n                translateY: offset\r\n            });\r\n    };\r\n\r\n    // Get/Set Translate X\r\n    $.fn.translateX = function (offset) {\r\n        if (offset == null) return getTranslate($(this))[0];\r\n        $(this).transform2D({\r\n            translateX: offset\r\n        });\r\n    };\r\n\r\n    // Get/Set Translate Y\r\n    $.fn.translateY = function (offset) {\r\n        if (offset == null) return getTranslate($(this))[1];\r\n        $(this).transform2D({\r\n            translateY: offset\r\n        });\r\n    };\r\n\r\n    // parse the option to processed \r\n    // processed data: [mark, value]\r\n    // mark: true: equal to,  false:add\r\n    var _parseOpts = function (options) {\r\n        // get opts based on current transform data\r\n        var input;\r\n        var tmp;\r\n        var operationIdx = -1;\r\n        var opts = {};\r\n\r\n        for (var i in options) {\r\n            if (options.hasOwnProperty(i) && options[i] != null) {\r\n                input = options[i];\r\n                if (typeof input == \"string\") {\r\n                    operationIdx = input.indexOf(\"+=\");\r\n                    if (operationIdx != -1) {\r\n                        input = parseFloat(input.substring(operationIdx + 2));\r\n                        if (input == input) opts[i] = [false, input];\r\n                        continue;\r\n                    }\r\n\r\n                    operationIdx = input.indexOf(\"-=\");\r\n                    if (operationIdx != -1) {\r\n                        input = -parseFloat(input.substring(operationIdx + 2));\r\n                        if (input == input) opts[i] = [false, input];\r\n                        continue;\r\n                    }\r\n\r\n                    input = parseFloat(input);\r\n                    if (input == input) opts[i] = [true, input];\r\n                } else if (typeof input == \"number\") {\r\n                    opts[i] = [true, input];\r\n                }\r\n            }\r\n        }\r\n\r\n        return opts;\r\n    };\r\n\r\n    // get the transform information from given options\r\n    var _getTransform = function (transform, ele) {\r\n        // get opts based on current transform data\r\n        var tmp;\r\n        var operationIdx = -1;\r\n\r\n        var opts = ele.transform2D();\r\n        for (var i in transform) {\r\n            if (transform.hasOwnProperty(i)) {\r\n                if (transform[i][0]) opts[i] = transform[i][1];\r\n                else opts[i] += transform[i][1];\r\n            }\r\n        }\r\n\r\n        return opts;\r\n    };\r\n\r\n    // Set Css3 2D transform\r\n    // Sequence:  Translate > Scale > Rotate\r\n    // Get(if no input arguement) return: Translate information.\r\n    $.fn.transform2D = function (options) {\r\n        if (isOldIE == null) isOldIE = detectOldIE();\r\n        if (options == null) {\r\n            // get all transform data\r\n            var scaleData = this.scale();\r\n            var translateData = this.translate();\r\n            return {\r\n                rotate: this.rotate(),\r\n                scaleX: scaleData[0],\r\n                scaleY: scaleData[1],\r\n                translateX: translateData[0],\r\n                translateY: translateData[1]\r\n            };\r\n        } else {\r\n            options = _parseOpts(options);\r\n            // set all transform data\r\n            this.each(function () {\r\n                var $this = $(this);\r\n                options = _getTransform(options, $this);\r\n\r\n                // handle transform\r\n                if (!isOldIE) {\r\n                    // Use Css 3 for modern browser\r\n                    //var m_str = \"matrix(\" + m[0] + \",\" + m[2] + \",\" + m[1] + \",\" + m[3] + \",\" + m[4] + \",\" + m[5] + \")\";\r\n                    var m_str =\r\n                        \"translateX(\" + options.translateX + \"px) \" +\r\n                        \"translateY(\" + options.translateY + \"px) \"+\r\n                        \"rotate(\" + options.rotate + \"deg) \"+\r\n                        \"scaleX(\" + options.scaleX + \") \" +\r\n                        \"scaleY(\" + options.scaleY + \") \";\r\n\r\n                    $this.css(\"-ms-transform\", m_str);\r\n                    $this.css(\"-webkit-transform\", m_str);\r\n                    $this.css(\"transform\", m_str);\r\n\r\n                } else {\r\n                    // For IE 7 8\r\n                    var radians = (options.rotate % 360) * (Math.PI / 180);\r\n                    var m2 = matrixMult([Math.cos(radians), Math.sin(radians), -1 * Math.sin(radians), Math.cos(radians), 0, 0], [options.scaleX, 0, 0, options.scaleY, options.translateX, options.translateY]);\r\n                    var m = [];\r\n                    for (var i = 0; i < 6; i++) {\r\n                        m[i] = String(m2[i]);\r\n                        if (m[i].indexOf(\".\") == -1) m[i] += \".0\";\r\n                    }\r\n                    // store original data\r\n                    var para = $this.data(keyName);\r\n                    var marginTop = 0;\r\n                    var marginLeft = 0;\r\n                    \r\n                    $this.css(\"-ms-filter\", \"\");\r\n                    $this.css(\"filter\", \"\");\r\n\r\n                    marginTop = parseInt($this.css('margin-top'));\r\n                    if (marginTop != marginTop) marginTop = 0;\r\n                    marginLeft = parseInt($this.css('margin-left'));\r\n                    if (marginLeft != marginLeft) marginLeft = 0;\r\n\r\n                    if (para != null) {\r\n                        marginTop -= para.marginTop;\r\n                        marginLeft -= para.marginLeft;\r\n                    };\r\n\r\n                    var original_w = $this.width();\r\n                    var original_h = $this.height();\r\n\r\n                    var m_str_ie = \"progid:DXImageTransform.Microsoft.Matrix(M11=\" + m[0] + \", M12=\" + m[2] + \", M21=\" + m[1] + \", M22=\" + m[3] + \", SizingMethod='auto expand')\";\r\n                    $this.css(\"-ms-filter\", m_str_ie);\r\n                    $this.css(\"filter\", m_str_ie);\r\n                    var w2 = $this.width();\r\n                    var h2 = $this.height();\r\n                    var offset_w = (w2 - original_w) / 2;\r\n                    var offset_h = (h2 - original_h) / 2;\r\n\r\n                    para = {\r\n                        translateX: options.translateX,\r\n                        translateY: options.translateY,\r\n                        marginTop: options.translateY - offset_h,\r\n                        marginLeft: options.translateX - offset_w\r\n                    };\r\n\r\n                    $this.css(\"margin-left\", (para.marginLeft + marginLeft) + \"px\");\r\n                    $this.css(\"margin-top\", (para.marginTop + marginTop) + \"px\");\r\n\r\n                    $this.data(keyName, para);\r\n                }\r\n            });\r\n            return this;\r\n        }\r\n    };\r\n})(jQuery);"],"sourceRoot":"/source/"}